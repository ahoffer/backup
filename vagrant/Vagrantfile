# -*- mode: ruby -*-
# vi: set ft=ruby :

def shell_script(host_file_content)
  return <<-SHELL
    export DEBIAN_FRONTEND=noninteractive  #Suppress warnings

    # Write new hosts file with localhost and VM entries
    echo "#{host_file_content}" | sudo tee /etc/hosts

    sudo apt update
    sudo apt upgrade -y
    sudo apt install -y apt-transport-https ca-certificates curl software-properties-common unzip
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor --batch -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    sudo apt update
    sudo apt install -y docker-ce
    docker login  -u "$GITLAB_USER"  -p "$GITLAB_TOKEN" registry.octo-cx-prod.runshiftup.com/v2/octo-cx

    # Add vagrant user to docker group
    sudo usermod -aG docker vagrant

    # Start and enable Docker service
    sudo systemctl enable --now docker
  SHELL
end

# Define VMs with incrementing IPs and VM names, and add /etc/hosts entries
def create_vms(config, total_vms)
  raise ArgumentError, "Number of VMs must be positive" if total_vms <= 0

  # Generate the hosts entries for all VMs
  config_data = (1..total_vms).map do |i|
    ip = "192.168.56.#{i+1}"
    hostname = "vm#{i}"
    [ip, hostname, "#{ip} #{hostname}"]
  end.transpose

  ips, host_names, host_file_entries = config_data
  # Prepend localhost entry to host file content
  host_file_content = "127.0.0.1\tlocalhost\n#{host_file_entries.join("\n")}"

  # Create each VM
  (0...total_vms).each do |i|
    config.vm.define host_names[i] do |vm|
      vm.vm.hostname = host_names[i]
      vm.vm.network "private_network", ip: ips[i]

      # Forward HTTP and HTTPS ports with unique host ports
      vm.vm.network "forwarded_port", guest: 80, host: 9080 + i
      vm.vm.network "forwarded_port", guest: 443, host: 9443 + i

      # Add VM resource configuration
      vm.vm.provider "virtualbox" do |vb|
        vb.memory = 20 * 1024 #Set memory size to GB
        vb.cpus = 8
      end

      # Pass the host_file_content to shell_script
      vm.vm.provision "shell", inline: shell_script(host_file_content)
    end
  end
end

# Main Vagrant configuration
Vagrant.configure("2") do |config|
  # VM "box" to use
  # config.vm.box = "ubuntu/jammy64"
  config.vm.box = "cxedge"

  # Set default SSH username
  config.ssh.username = "vagrant"

  # Enable SSH agent forwarding
  config.ssh.forward_agent = true

  # Call the create_vms method with desired number of VMs
  create_vms(config, 2) # Replace 2 with desired number of VMs
end