# Mount synology volumes
# Lightly tested and probably misses error conditions. 
# Blame Aaron Hoffer
# REM AF_DCGS-Controlled

# Example 1 mounts "software" to /home/{user}/synology/software and looks for the credentials file at /home/{user}/.synology
#
# $ synology software
#
#
# Example 2 mounts "software" and "AFDCGS"
#
# $ synology software AFDCGS
#
#
# Example 3 provides the path to the credentials file.
#
# $ synology -p ~/mycredendtials software
#
#
# Example 4 provides the parent directory for mount points.
#
# $ synology -d ~/mydir software
#
#
#  CREDENTIALS FILE
# This script requires a credentials file.
# The format is simple. There are only two lines in the file.
#   username={username}
#   password=YOUR_WINSHARE_PASSWORD_NOT_YOUR_LDAP_PASSWORD

function test_connection() {
  # Make sure synology is reachable.
  # Exit if it is not.
  if ! ping -c1 winshare.phx.connexta.com  >/dev/null 2>&1; then
    echo ERROR. Connect to VPN first.
    exit 1
  fi
}

function set_vars() {
  # Set defaults if values not specified on command line.
  if [ -z $MY_MOUNT_ROOT ]; then
    MY_MOUNT_ROOT=$HOME/synology
  fi

  if [ -z $CRED_FILE ]; then
    CRED_FILE=$HOME/.synology
  fi

  if [ ! -e $CRED_FILE ]; then
    echo ERROR. Could not find credentials file "$CRED_FILE".
    echo Create the file, or use option -p to specify the path to credentials file.
    echo Exiting
    exit 2
  fi
}

function mount_one() {
  sudo mount -t cifs -o credentials=${CRED_FILE} "//winshare.phx.connexta.com/${1}" "$MY_MOUNT_ROOT/${1}"
}

function check_args() {
  if [ $1 = 0 ]; then
    echo ERROR. Add the names of directories to mount.
    echo E.g., the command \"synology software\" mounts the directory \"software\"
    echo Exiting
    exit 3
  fi
}

function mount_all() {
  # Iterate over desired mounts
  for vol in "$@"; do
    echo Mounting $vol to $MY_MOUNT_ROOT/$vol
    mkdir -p $MY_MOUNT_ROOT/$vol
    mount_one $vol
  done
}
# *****************************************************************************
#                                   MAIN
# *****************************************************************************
while getopts ":d:p:" opt; do
  case ${opt} in
  d)
    MY_MOUNT_ROOT=$OPTARG
    ;;
  p)
    CRED_FILE=$OPTARG
    ;;
  :)
    echo "Invalid option: $OPTARG requires an argument" 1>&2
    exit 6
    ;;
  esac
done

# Get rid of processed options
shift $((OPTIND - 1))

test_connection
set_vars
check_args $#
mount_all "$@"

